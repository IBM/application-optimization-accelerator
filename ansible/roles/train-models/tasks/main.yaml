- name: Get username
  shell: oc get secret $(oc get secrets | grep ibm-aiops-elastic-secret | awk '!/-min/' | awk '{print $1;}') -o jsonpath="{.data.username}"| base64 --decode
  register: username_output
  when: ansible_distribution == "MacOSX"

- name: Get username
  shell: oc get secret $(oc get secrets | grep ibm-aiops-elastic-secret | awk '!/-min/' | awk '{print $1;}') -o jsonpath="{.data.username}"| base64 -di
  register: username_output
  when: ansible_distribution != "MacOSX"

- name: Set username
  set_fact:
    username: username_output.stdout

- name: Get password
  shell: oc get secret $(oc get secrets | grep ibm-aiops-elastic-secret | awk '!/-min/' | awk '{print $1;}') -o jsonpath="{.data.password}"| base64 --decode
  register: password_output
  when: ansible_distribution == "MacOSX"

- name: Get password
  shell: oc get secret $(oc get secrets | grep ibm-aiops-elastic-secret | awk '!/-min/' | awk '{print $1;}') -o jsonpath="{.data.password}"| base64 -di
  register: password_output
  when: ansible_distribution != "MacOSX"

- name: Set password
  set_fact:
    password: password_output.stdout

- name: Port Forward
  shell: curl -s -k -u $username:$password -XGET https://localhost:9200/_cat/indices
  register: existingIndexes_output
  
- name: Set existingIndexes
  set_fact:
    existingIndexes: existingIndexes_output.stdout

- name: Create route
  shell: oc create route passthrough ai-platform-api -n "{{ NAMESPACE }}"  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None>/dev/null 2>&1

- name: Create route variable
  shell: oc get route -n "{{ NAMESPACE }}" ai-platform-api  -o jsonpath={.spec.host}
  register: ROUTE_OUTPUT

- name: set ROUTE
  set_fact:
    ROUTE: ROUTE_OUTPUT.stdout



- name: TRAINING CREATE EVENTS -        üöÄ CREATE AND LAUNCH TEMPORAL GROUPING CONFIGURATION
  shell: |
    set -x
    
    pwd
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Create Analysis Definiton: Temporal Grouping"
    export FILE_NAME=create-analysis-TG.graphql
    ../tools/02_training/scripts/execute-graphql.sh
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Run Analysis: Temporal Grouping"
    export FILE_NAME=run-analysis-TG.graphql
    ../tools/02_training/scripts/execute-graphql.sh
  register: output_string
  ignore_errors: yes
- name: TRAINING CREATE EVENTS -       ‚úÖ RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true

- name: TRAINING CREATE SNOW -        üöÄ CREATE SNOW CONFIGURATION
  shell: |
    set -x
    
    pwd
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Create Analysis Definiton: Change Risk"
    export FILE_NAME=create-analysis-CR.graphql
    ../tools/02_training/scripts/execute-graphql.sh
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Create Analysis Definiton: Similar Incidents"
    export FILE_NAME=create-analysis-SI.graphql
    ../tools/02_training/scripts/execute-graphql.sh
  register: output_string
  ignore_errors: yes
- name: TRAINING CREATE SNOW -       ‚úÖ RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true


- name: TRAINING CREATE LAD -        üöÄ CREATE LAD CONFIGURATION
  shell: |
    set -x
    
    if [[ ! $ROUTE =~ "ai-platform-api" ]]; then
          echo "       üõ†Ô∏è  Create Route"
          oc create route passthrough ai-platform-api -n $NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
          export ROUTE=$(oc get route -n $NAMESPACE ai-platform-api  -o jsonpath={.spec.host})
          echo "        Route: $ROUTE"
          echo ""
    fi
 

    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Turn off RSA - Log Anomaly Statistical Baseline"
    export FILE_NAME=deactivate-analysis-RSA.graphql
    ../tools/02_training/scripts/execute-graphql.sh


    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Create Data Set: Log Anomaly Detection"
    echo "     "	
    echo "      üì• Launch Query for file: create-dataset-LAD.graphql"	
    echo "     "
    QUERY="$(cat ../tools/02_training/training-definitions/create-dataset-LAD.graphql)"
    JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
    export result=$(curl -XPOST "https://$ROUTE/graphql" -k -s -H 'Content-Type: application/json' -d "${JSON_QUERY}")
    export DATA_SET_ID=$(echo $result| jq -r ".data.createDataSet.dataSetId")
    echo "      üîé Result: "
    echo "       "$result|jq ".data" | sed 's/^/          /'
    echo "     "	
    echo "     "	



    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Create Analysis Definiton: Log Anomaly Detection"
    echo "     "	
    echo "      üì• Launch Query for file: create-analysis-LAD.graphql"	
    echo "     "
    QUERY_TMPL="$(cat ../tools/02_training/training-definitions/create-analysis-LAD.graphql)"
    QUERY=$(echo $QUERY_TMPL | sed "s/<DATA_SET_ID>/$DATA_SET_ID/g")
    JSON_QUERY=$(echo "${QUERY}" | jq -sR '{"operationName": null, "variables": {}, "query": .}')
    export result=$(curl -XPOST "https://$ROUTE/graphql" -k -s -H 'Content-Type: application/json' -d "${JSON_QUERY}")
    echo "      üîé Result: "
    echo "       "$result|jq ".data" | sed 's/^/          /'
    echo "     "	
    echo "     "	


  register: output_string
  ignore_errors: yes
  args:
    executable: /bin/bash
    
- name: TRAINING CREATE LAD -       ‚úÖ RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true


- name: TRAINING LOAD SNOW -       üöÄ CREATE CLUSTERROLE
  kubernetes.core.k8s:
    state: present
    namespace: default
    src: ./templates/training/default-cluserrole.yaml
    

- name: TRAINING LOAD SNOW -       üöÄ LOAD ELASTICSEARCH SNOW DATA 
  kubernetes.core.k8s:
    state: present
    namespace: default
    src: ./templates/training/load-job-snow.yaml
  

- name: TRAINING LOAD SNOW -       üï¶ WAIT FOR COMPLETION
  shell: |
    while : ; do
          READY=$(oc get jobs -n default load-snow-indexes)
          if [[ ! $READY  =~ "1/1" ]]; then
                echo "        Load Job not completed. Waiting 30 seconds"
                sleep 30
          else
                break
          fi
    done
    echo "      ‚úÖ OK"
  register: ES_READY
  args:
    executable: /bin/bash


- name: TRAINING LOAD SNOW -       üßª CLEANUP JOB
  kubernetes.core.k8s:
    state: absent
    namespace: turbonomic
    src: ./templates/training/load-job-snow.yaml
  


- name: TRAINING LOAD SNOW -       üßª CLEANUP COMPLETED JOBS
  shell: |
    oc delete pod  -n default --ignore-not-found $(oc get po -n default|grep load-snow-indexes|awk '{print$1}')
  register: ES_READY
  ignore_errors: yes


- name: TRAINING RUN SNOW -       üöÄ RUN SNOW TRAINING
  shell: |
    set -x
    
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Run Analysis: Change Risk"
    export FILE_NAME=run-analysis-CR.graphql
    ../tools/02_training/scripts/execute-graphql.sh
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Run Analysis: Similar Incidents"
    export FILE_NAME=run-analysis-SI.graphql
    ../tools/02_training/scripts/execute-graphql.sh
  register: output_string
  ignore_errors: yes
- name: TRAINING RUN SNOW -       ‚úÖ RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true



- name: TRAINING LOAD LAD -        üöÄüöÄ CREATE CLUSTERROLE
  kubernetes.core.k8s:
    state: present
    namespace: default
    src: ./templates/training/default-cluserrole.yaml
    

- name: TRAINING LOAD LAD -        üöÄ LOAD ELASTICSEARCH LOG DATA 
  kubernetes.core.k8s:
    state: present
    namespace: turbonomic
    src: ./templates/training/load-job-logs.yaml

- name: TRAINING LOAD LAD -        üï¶ WAIT FOR COMPLETION
  shell: |
    while : ; do
          READY=$(oc get jobs -n default load-log-indexes)
          if [[ ! $READY  =~ "1/1" ]]; then
                echo "        Load Job not completed. Waiting 30 seconds"
                sleep 30
          else
                break
          fi
    done
    echo "      ‚úÖ OK"
  register: ES_READY
  args:
    executable: /bin/bash


- name: TRAINING LOAD LAD -        üßª CLEANUP JOB
  kubernetes.core.k8s:
    state: absent
    namespace: turbonomic
    src: ./templates/training/load-job-logs.yaml
  

- name: TRAINING LOAD LAD -        üßª CLEANUP COMPLETED JOBS
  shell: |
    oc delete pod  -n default --ignore-not-found $(oc get po -n default|grep load-logs-indexes|awk '{print$1}')
  register: ES_READY
  ignore_errors: yes


- name: TRAINING RUN LAD -       üöÄ RUN LAD TRAINING
  shell: |
    set -x
    
    echo "  ***************************************************************************************************************************************************"
    echo "   üõ†Ô∏è  Run Analysis: Log Anomaly Detection"
    export FILE_NAME=run-analysis-LAD.graphql
    ../tools/02_training/scripts/execute-graphql.sh
  register: output_string
  ignore_errors: yes
- name: TRAINING RUN LAD -       ‚úÖ RESULT
  debug: 
    var: output_string.stdout_lines
  #when: PRINT_LOGINS == true