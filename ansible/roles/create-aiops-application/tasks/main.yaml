- name: Get proxy domain
  shell: oc get ingress.config cluster -o jsonpath='{.spec.domain}'
  register: PROXY_DOMAIN_OUTPUT

- name: Set proxy domain
  set_fact:
    PROXY_DOMAIN: "{{ PROXY_DOMAIN_OUTPUT.stdout }}"

- name: Create a route to the API
  kubernetes.core.k8s:
    template: ./templates/route.j2
    state: present
  # wait_for:
  #   timeout: 5 

- name: Wait for route to the API
  uri:
    url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/service/info"
    method: GET
  register: OUTPUT
  retries: 80
  delay: 120
  # until: OUTPUT.status == 200
  until: (OUTPUT.status == 200) and ('"OK" in OUTPUT.msg')
  
- name: Get and set credentials for OS other than MacOSX
  block:
    - name: Get password
      shell: oc get secret aiops-topology-asm-credentials -n "{{ NAMESPACE }}" -o yaml | grep password | cut -d ':' -f2 | base64 -di | tr -cd '[:print:]'
      register: PASSWORD_OUTPUT

    - name: Set password
      set_fact:
        PASSWORD: "{{ PASSWORD_OUTPUT.stdout }}"
        
    - name: Get username
      shell: oc get secret aiops-topology-asm-credentials -n "{{ NAMESPACE }}" -o yaml | grep username | cut -d ':' -f2 | base64 -di | tr -cd '[:print:]'
      register: USERNAME_OUTPUT

    - name: Set username
      set_fact:
        USERNAME: "{{ USERNAME_OUTPUT.stdout }}"
  when: ansible_distribution != "MacOSX"

- name: Get and set credentials for MacOSX
  block:
    - name: Get password
      shell: oc get secret aiops-topology-asm-credentials -n "{{ NAMESPACE }}" -o yaml | grep password | cut -d ':' -f2 | base64 -d | tr -cd '[:print:]'
      register: PASSWORD_OUTPUT

    - name: Set password
      set_fact:
        PASSWORD: "{{ PASSWORD_OUTPUT.stdout }}"
        
    - name: Get username
      shell: oc get secret aiops-topology-asm-credentials -n "{{ NAMESPACE }}" -o yaml | grep username | cut -d ':' -f2 | base64 -d | tr -cd '[:print:]'
      register: USERNAME_OUTPUT

    - name: Set username
      set_fact:
        USERNAME: "{{ USERNAME_OUTPUT.stdout }}"
  when: ansible_distribution == "MacOSX"

# - name: Get groups
#   uri:
#     url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups/OWL8-RPcTAGFlpX16iqm6A"
#     user: "{{ USERNAME }}"
#     password: "{{ PASSWORD }}"
#     method: GET
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#       X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
#     status_code: 200

# - name: Get groups
#   uri:
#     url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups/FFwQV4w4SIyJhnTzF3tbYQ"
#     user: "{{ USERNAME }}"
#     password: "{{ PASSWORD }}"
#     method: GET
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#       X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
#     status_code: 200

# curl -k -X POST \
# -H  "Content-Type: application/json" \
# -H  "Accept: application/json" \
# -H "X-TenantID: $X_TENANT_ID" \
# --user "$USERNAME:$PASSWORD" \
# -d @cp4waiops-assets/app.json \
# "$APPLICATION_MANAGER_BASE_URL/groups"

- name: Create an AIOPs Application
  uri:
    url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups"
    user: "{{ USERNAME }}"
    password: "{{ PASSWORD }}"
    method: POST
    body: "{{ lookup('file','application.json') }}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
    status_code: 201

# APP_ID=$(
# curl -k -X GET \
# -H  "Content-Type: application/json" \
# -H  "Accept: application/json" \
# -H "X-TenantID: $X_TENANT_ID" \
# --user "$USERNAME:$PASSWORD" \
# "$APPLICATION_MANAGER_BASE_URL/groups?_field=*" \
# | jq -r -c '._items[]| select( .keyIndexName == "robot-shop")|._id'
# )

- name: Get Member ID
  uri:
    url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups?_field=*"
    user: "{{ USERNAME }}"
    password: "{{ PASSWORD }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
    status_code: 200
  register: MEMBER_ID_OUTPUT

- name: Set Member ID
  set_fact:
    MEMBER_ID: "{{ MEMBER_ID_OUTPUT.json._items[0]._id }}"


# K8S_OBS_ID=$(
# curl -k -X GET \
# -H  "Content-Type: application/json" \
# -H  "Accept: application/json" \
# -H "X-TenantID: $X_TENANT_ID" \
# --user "$USERNAME:$PASSWORD" \
# "$APPLICATION_MANAGER_BASE_URL/groups?_field=*" \
# | jq -r -c '._items[]| select( .keyIndexName == "demo::kubernetes::namespace::robot-shop")|._id'
# )

- name: Get App ID
  uri:
    url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups?_field=*"
    user: "{{ USERNAME }}"
    password: "{{ PASSWORD }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
    status_code: 200
  register: APP_OUTPUT

- name: Set App ID
  set_fact:
    APP_ID: "{{ APP_OUTPUT.json._items[1]._id }}"

# curl -k -X POST \
# -H  "Content-Type: application/json" \
# -H  "Accept: application/json" \
# -H "X-TenantID: $X_TENANT_ID" \
# --user "$USERNAME:$PASSWORD" \
# -d "{\"_id\": \"$K8S_OBS_ID\"}" \
# "$APPLICATION_MANAGER_BASE_URL/groups/$APP_ID/members"

- name: Set AIOps Application Member ID
  uri:
    url: "https://asm-svt-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}/1.0/topology/groups/{{ APP_ID }}/members"
    user: "{{ USERNAME }}"
    password: "{{ PASSWORD }}"
    method: POST
    body: "{{ lookup('template','./roles/create-aiops-application/templates/member.j2') }}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
      X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255
    status_code: 200