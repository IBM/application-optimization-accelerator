---
- name: Finalize TLS configuration
  shell: |
    oc project "{{ NAMESPACE }}"
    AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n "{{ NAMESPACE }}" --no-headers -o custom-columns=":metadata.name")
    IAF_STORAGE=$(oc get AutomationUIConfig -n "{{ NAMESPACE }}" -o jsonpath='{ .items[*].spec.zenService.storageClass }')
    ZEN_STORAGE=$(oc get AutomationUIConfig -n "{{ NAMESPACE }}" -o jsonpath='{ .items[*].spec.zenService.zenCoreMetaDbStorageClass }')
    oc delete -n "{{ NAMESPACE }}" AutomationUIConfig $AUTO_UI_INSTANCE
    cat <<EOF | oc apply -f -
    apiVersion: core.automation.ibm.com/v1beta1
    kind: AutomationUIConfig
    metadata:
        name: $AUTO_UI_INSTANCE
        namespace: "{{ NAMESPACE }}"
    spec:
        description: AutomationUIConfig for cp4waiops
        license:
            accept: true
        version: v1.3
        tls:
            caSecret:
                key: ca.crt
                secretName: external-tls-secret
            certificateSecret:
                secretName: external-tls-secret
        zen: true
        zenService:
            storageClass: $IAF_STORAGE
            zenCoreMetaDbStorageClass: $ZEN_STORAGE
            iamIntegration: true
    EOF
    ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
    oc get secret -n openshift-ingress -o 'go-template={{ '{{' }}index .data "tls.crt"{{ '}}' }}' ${ingress_pod} | base64 -d > cert.crt
    oc get secret -n openshift-ingress -o 'go-template={{ '{{' }}index .data "tls.key"{{ '}}' }}' ${ingress_pod} | base64 -d > cert.key
    oc get secret -n "{{ NAMESPACE }}" external-tls-secret -o yaml > external-tls-secret.yaml
    oc delete secret -n "{{ NAMESPACE }}" external-tls-secret
    oc create secret generic -n "{{ NAMESPACE }}" external-tls-secret --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key --dry-run=client -o yaml | oc apply -f -
    REPLICAS=$(oc get pods -l component=ibm-nginx -o jsonpath='{ .items[*].metadata.name }' | wc -w | tr -d " \t\n\r")
    sleep 60
    oc scale Deployment/ibm-nginx --replicas=0
    oc scale Deployment/ibm-nginx --replicas=${REPLICAS}

# - name: Finalize TLS configuration
#   shell: ./roles/finalize-tls-configuration/files/finalize-tls-configuration.sh "{{ NAMESPACE }}"
    
# # - name: Finalize TLS configuration
# #   shell: |
# #     oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}'
# #     oc extract secret/$(oc get route console -n openshift-console -o jsonpath="{.spec.host}" | awk -F'.' '{print $2}') -n openshift-ingress --confirm --to=./
# #     split -p "-----BEGIN CERTIFICATE-----" tls.crt cert-
# #     oc -n ibm-common-services delete certificate route-cert
# #     oc -n ibm-common-services delete secret route-tls-secret
# #     oc -n ibm-common-services create secret generic route-tls-secret --from-file=ca.crt=./cert-ab  --from-file=tls.crt=./cert-aa  --from-file=tls.key=./tls.key
# #     oc -n "{{ NAMESPACE }}" patch AutomationUIConfig iaf-system --type merge --patch '{"spec":{"tls":{"issuerRef":{"name":""}}}}'
# #     oc -n "{{ NAMESPACE }}" create secret generic external-tls-secret --from-file=cert.crt=./tls.crt  --from-file=cert.key=./tls.key
# #     oc -n ibm-common-services delete pod -l app=auth-idp
# #     oc -n "{{ NAMESPACE }}" delete pod -l component=ibm-nginx

# - name: Patch ManagementIngress
#   shell: oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}'

# - name: Extract TLS Certificates
#   shell: oc extract secret/$(oc get route console -n openshift-console -o jsonpath="{.spec.host}" | awk -F'.' '{print $2}') -n openshift-ingress --confirm --to=./
   
# - name: Split TLS Certificates
#   shell: csplit -z tls.crt -f cert- '/-----BEGIN CERTIFICATE-----/' '{*}'

# - name: Check if route-cert certificate exists
#   kubernetes.core.k8s_info:
#     kind: Certificate
#     namespace: ibm-common-services
#     name: route-cert
#   register: EXISTS

# - name: Delete route-cert certificate
#   shell: oc -n ibm-common-services delete certificate route-cert
#   when: EXISTS.resources | length != 0

# - name: Delete route-tls-secret
#   shell: oc -n ibm-common-services delete secret route-tls-secret

# - name: Create route-tls-secret
#   shell: oc -n ibm-common-services create secret generic route-tls-secret --from-file=ca.crt=./cert-01  --from-file=tls.crt=./cert-00  --from-file=tls.key=./tls.key

# - name: Get auto ui instance
#   shell: oc get AutomationUIConfig -n "{{ NAMESPACE }}" --no-headers -o custom-columns=":metadata.name"
#   register: AUTO_UI_INSTANCE_OUTPUT

# - name: Set auto ui instance
#   set_fact:
#     AUTO_UI_INSTANCE: "{{ AUTO_UI_INSTANCE_OUTPUT.stdout }}"

# - name: get iaf storage
#   shell: oc get AutomationUIConfig -n "{{ NAMESPACE }}" -o jsonpath='{ .items[*].spec.zenService.storageClass }'
#   register: IAF_STORAGE_OUTPUT

# - name: Set iaf storage
#   set_fact:
#     IAF_STORAGE: "{{ IAF_STORAGE_OUTPUT.stdout }}"

# - name: Get zen storage
#   shell: oc get AutomationUIConfig -n "{{ NAMESPACE }}" -o jsonpath='{ .items[*].spec.zenService.zenCoreMetaDbStorageClass }'
#   register: ZEN_STORAGE_OUTPUT

# - name: Set zen storage
#   set_fact:
#     ZEN_STORAGE: "{{ ZEN_STORAGE_OUTPUT.stdout }}"
  
# - name: Delete automation ui config
#   shell: oc delete -n "{{ NAMESPACE }}" AutomationUIConfig "{{ AUTO_UI_INSTANCE }}"
  
# - name: Create automation ui config
#   kubernetes.core.k8s:
#     state: present
#     template: ./templates/automation-ui-config.j2

# - name: Patch AutomationUIConfig
#   shell: oc -n "{{ NAMESPACE }}" patch AutomationUIConfig iaf-system --type merge --patch '{"spec":{"tls":{"issuerRef":{"name":""}}}}'

# - name: Check if external-tls-secret exists
#   kubernetes.core.k8s_info:
#     kind: secret
#     namespace: "{{ NAMESPACE }}"
#     name: external-tls-secret
#   register: EXISTS

# - name: Delete external-tls-secret
#   shell: oc delete secret -n "{{ NAMESPACE }}" external-tls-secret
#   when: EXISTS.resources | length != 0

# - name: Create external-tls-secret
#   shell: oc -n "{{ NAMESPACE }}" create secret generic external-tls-secret --from-file=cert.crt=./tls.crt  --from-file=cert.key=./tls.key

# - name: Delete auth-idp pods
#   shell: oc -n ibm-common-services delete pod -l app=auth-idp

# # Continuously check for updated external-tls-secret mount
# # in ibm-nginx pods
# - name: Wait for the kubelet to update the secret
#   wait_for:
#     timeout: 80

# - name: Delete ibm-nginx pods
#   shell: oc -n "{{ NAMESPACE }}" delete pod -l component=ibm-nginx

- name: Wait for ibm-nginx pods
  kubernetes.core.k8s_info:
    kind: Pod
    wait: yes
    label_selectors:
      - component = ibm-nginx
    namespace: "{{ NAMESPACE }}"
    wait_sleep: 10
    wait_timeout: 360
    
- name: Get proxy domain
  shell: oc get ingress.config cluster -o jsonpath='{.spec.domain}'
  register: PROXY_DOMAIN_OUTPUT

- name: Set proxy domain
  set_fact:
    PROXY_DOMAIN: "{{ PROXY_DOMAIN_OUTPUT.stdout }}"

- name: Wait for secured route
  uri:
    url: "https://cpd-{{ NAMESPACE }}.{{ PROXY_DOMAIN }}"
    method: GET
  register: OUTPUT
  retries: 80
  delay: 120
  # until: OUTPUT.status == 200
  until: (OUTPUT.status == 200) and ('"OK" in OUTPUT.msg') and (OUTPUT.redirected == true)

    
# - name: Finalize TLS configuration
#   shell: |
#     oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}'
#     oc extract secret/$(oc get route console -n openshift-console -o jsonpath="{.spec.host}" | awk -F'.' '{print $2}') -n openshift-ingress --confirm --to=./
#     split -p "-----BEGIN CERTIFICATE-----" tls.crt cert-
#     oc -n ibm-common-services delete certificate route-cert
#     oc -n ibm-common-services delete secret route-tls-secret
#     oc -n ibm-common-services create secret generic route-tls-secret --from-file=ca.crt=./cert-ab  --from-file=tls.crt=./cert-aa  --from-file=tls.key=./tls.key
#     oc -n "{{ NAMESPACE }}" patch AutomationUIConfig iaf-system --type merge --patch '{"spec":{"tls":{}}}'
#     oc -n "{{ NAMESPACE }}" create secret generic external-tls-secret --from-file=cert.crt=./tls.crt  --from-file=cert.key=./tls.key
#     oc -n ibm-common-services delete pod -l app=auth-idp
#     oc -n "{{ NAMESPACE }}" delete pod -l component=ibm-nginx

# - name: Wait for secured route
#   wait_for:
#     timeout: 90